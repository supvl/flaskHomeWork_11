import json


def load_candidates() -> list[dict]:
    """
    Получение данных из JSON-файла
    :return: список словарей с данными, полученными из JSON-файла
    """
    # Записываем в переменную название JSON-файла
    file_json = "candidates.json"
    # Открываем на чтение это JSON-файл
    with open(file_json, mode='r', encoding='utf-8') as file:
        # Все данные из JSON-файла записываем в список словарей, который возвращаем
        data_candidates = json.load(file)
    return data_candidates


def get_all() -> str:
    """
    Выводит необходимые данные всех кандидатов
    :return: список кандидатов с необходимыми данными
    """
    # Получаем и записываем в переменную весь список словарей с данными кандидатов
    data_candidates = load_candidates()
    # Начинаем записывать в переменную все, что будет возвращать эта функция
    display = '<pre>\t\tВсе кандидаты:\n'

    # Запускаем цикл по списку словарей с данными кандидатов - в каждой итерации добавляем
    # в переменную необходимые данные каждого кандидата
    for candidate in data_candidates:
        display += f""" 
                   Имя - {candidate['name']}
                   Позиция - {candidate['position']}
                   Навыки - {candidate['skills']}
                   """
    display += '</pre>'
    return display


def get_by_pk(pk: int) -> str:
    """
    Выводит данные одного кандитата по выбранному персональному номеру
    :param pk: персональный номер кандидата
    :return: необходимые данные выбранного кандидата
    """
    # Получаем и записываем в переменную весь список словарей с данными кандидатов
    data_candidates = load_candidates()

    # Запускаем цикл по списку словарей с данными кандидатов
    for candidate in data_candidates:

        # Если в общем списке присутствует кандидат с выбранным номером, то записываем
        # его данные в переменную, которую потом выводим
        if candidate['pk'] == pk:
            display = f"""
                    <pre>
                    \tКандидат номер {pk}:\n
                    <img src = "{candidate['picture']}">
                    <pre>
                    Имя - {candidate['name']}
                    Позиция - {candidate['position']}
                    Навыки - {candidate['skills']}
                    </pre>
                    """
            return display

    # Если кандидата с таким номером нет в общем списке, то выводим сообщение об этом
    return "<pre>\tНет кандидата с таким номером.</pre>"


def get_by_skill(skill_name: str) -> str:
    """
    Выводит данные кандидатов, имеющих заданное знание-умение
    :param skill_name: название заданного знания-умения
    :return: данные кандидатов с выбранным знанием-умением
    """
    # Получаем и записываем в переменную весь список словарей с данными кандидатов
    data_candidates = load_candidates()
    # Начинаем записывать в переменную то, что будет возвращать эта функция
    display = f'<pre>\t\tKандидаты с навыком {skill_name}:\n'
    # Определяем флаг определения факта нахождения кандидатов с выбранным скиллом
    found = False

    # Запускаем цикл по списку словарей с данными кандидатов
    for candidate in data_candidates:

        # В каждую итерацию проверяем нахождение заданного скила в списке скиллов
        # кандидата, и если такой скилл у кандидата есть, то
        if skill_name.lower() in candidate['skills'].lower().split(", "):
            # Устанавливаем признак нахождения кандидата
            found = True
            # Добавляем в переменную для вывода необходимые данные кандидата
            display += f"""            
                       Имя - {candidate['name']}
                       Позиция - {candidate['position']}
                       Навыки - {candidate['skills']}
                       """
    display += '</pre>'

    # Если найдены кандитаты с выбранным скиллом, то выводим их данные
    if found:
        return display
    # Если не найдены кандитаты с выбранным скиллом, то выводим сообщение об этом
    else:
        return f"<pre>\tНет кандидатов с навыком {skill_name}!</pre>"
